0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.1.33
3 info using node@v0.8.1
4 verbose config file /Users/andris/.npmrc
5 verbose config file /usr/local/etc/npmrc
6 verbose config file /usr/local/lib/node_modules/npm/npmrc
7 verbose publish [ '.' ]
8 verbose read json /Users/andris/Projects/inbox/package.json
9 verbose cache add [ '.', null ]
10 silly cache add name=undefined spec="." args=[".",null]
11 verbose parsed url { pathname: '.', path: '.', href: '.' }
12 verbose lock . /Users/andris/.npm/3a52ce780950d4d969792a2559cd519d7ee8c727--.lock
13 verbose read json package.json
14 verbose tar pack [ '/var/folders/z1/mz6slcdn37z7tnt0v7m_l_780000gn/T/npm-66866/1342533658619-0.44802877004258335/tmp.tgz',
14 verbose tar pack   '.' ]
15 verbose tarball /var/folders/z1/mz6slcdn37z7tnt0v7m_l_780000gn/T/npm-66866/1342533658619-0.44802877004258335/tmp.tgz
16 verbose folder .
17 info prepublish inbox@0.1.12
18 verbose tar unpack /var/folders/z1/mz6slcdn37z7tnt0v7m_l_780000gn/T/npm-66866/1342533658619-0.44802877004258335/tmp.tgz
19 silly gunzTarPerm modes [ '755', '644' ]
20 silly gunzTarPerm extractEntry package.json
21 silly gunzTarPerm extractEntry .npmignore
22 silly gunzTarPerm extractEntry README.md
23 silly gunzTarPerm extractEntry .travis.yml
24 silly gunzTarPerm extractEntry examples/append.js
25 silly gunzTarPerm extractEntry examples/id.js
26 silly gunzTarPerm extractEntry examples/list.js
27 silly gunzTarPerm extractEntry examples/xoauth.js
28 silly gunzTarPerm extractEntry lib/client.js
29 silly gunzTarPerm extractEntry lib/lineparser.js
30 silly gunzTarPerm extractEntry lib/mailbox.js
31 silly gunzTarPerm extractEntry lib/starttls.js
32 silly gunzTarPerm extractEntry lib/xoauth.js
33 silly gunzTarPerm extractEntry lib/names.json
34 silly gunzTarPerm extractEntry test/lineparser.js
35 silly gunzTarPerm extractEntry tools/clientplayground.js
36 silly gunzTarPerm extractEntry tools/parserplayground.js
37 silly gunzTarPerm extractEntry tools/proxy.js
38 verbose read json /var/folders/z1/mz6slcdn37z7tnt0v7m_l_780000gn/T/npm-66866/1342533658619-0.44802877004258335/package/package.json
39 verbose from cache /var/folders/z1/mz6slcdn37z7tnt0v7m_l_780000gn/T/npm-66866/1342533658619-0.44802877004258335/package/package.json
40 verbose tar pack [ '/Users/andris/.npm/inbox/0.1.12/package.tgz',
40 verbose tar pack   '/var/folders/z1/mz6slcdn37z7tnt0v7m_l_780000gn/T/npm-66866/1342533658619-0.44802877004258335/package' ]
41 verbose tarball /Users/andris/.npm/inbox/0.1.12/package.tgz
42 verbose folder /var/folders/z1/mz6slcdn37z7tnt0v7m_l_780000gn/T/npm-66866/1342533658619-0.44802877004258335/package
43 verbose tar unpack /Users/andris/.npm/inbox/0.1.12/package.tgz
44 silly gunzTarPerm modes [ '755', '644' ]
45 silly gunzTarPerm extractEntry package.json
46 silly gunzTarPerm extractEntry .npmignore
47 silly gunzTarPerm extractEntry README.md
48 silly gunzTarPerm extractEntry .travis.yml
49 silly gunzTarPerm extractEntry examples/append.js
50 silly gunzTarPerm extractEntry examples/id.js
51 silly gunzTarPerm extractEntry examples/list.js
52 silly gunzTarPerm extractEntry examples/xoauth.js
53 silly gunzTarPerm extractEntry lib/client.js
54 silly gunzTarPerm extractEntry lib/lineparser.js
55 silly gunzTarPerm extractEntry lib/mailbox.js
56 silly gunzTarPerm extractEntry lib/starttls.js
57 silly gunzTarPerm extractEntry lib/xoauth.js
58 silly gunzTarPerm extractEntry lib/names.json
59 silly gunzTarPerm extractEntry test/lineparser.js
60 silly gunzTarPerm extractEntry tools/clientplayground.js
61 silly gunzTarPerm extractEntry tools/parserplayground.js
62 silly gunzTarPerm extractEntry tools/proxy.js
63 verbose read json /Users/andris/.npm/inbox/0.1.12/package/package.json
64 silly shasum updated bytes 26303
65 info shasum 48654d86a706c6c2d413b1b15a52c82766ce06d6
65 info shasum /Users/andris/.npm/inbox/0.1.12/package.tgz
66 verbose from cache /Users/andris/.npm/inbox/0.1.12/package/package.json
67 verbose chmod /Users/andris/.npm/inbox/0.1.12/package.tgz 644
68 verbose chown /Users/andris/.npm/inbox/0.1.12/package.tgz [ 501, 20 ]
69 silly publish { name: 'inbox',
69 silly publish   version: '0.1.12',
69 silly publish   author: { name: 'Andris Reinman' },
69 silly publish   maintainers: [ { name: 'andris', email: 'andris@node.ee' } ],
69 silly publish   main: 'lib/client.js',
69 silly publish   dependencies: { mimelib: '*', iconv: '*' },
69 silly publish   devDependencies: { nodeunit: '*' },
69 silly publish   scripts: { test: 'nodeunit test' },
69 silly publish   readme: '# inbox\n\nThis is a work in progress IMAP client for node.js. \n\nThe project consists of two major parts\n\n  * IMAP command parser (token based, more or less complete)\n  * IMAP control for accessing mailboxes (under construction)\n\n[![Build Status](https://secure.travis-ci.org/andris9/inbox.png)](http://travis-ci.org/andris9/inbox)\n\n## Installation\n\nInstall from npm\n\n    npm install inbox\n\n## API\n\n**NB!** This API is preliminary and may change.\n\nUse **inbox** module\n\n    var inbox = require("inbox");\n\n### Create new IMAP connection\n\nCreate connection object with \n\n    inbox.createConnection(port, host, options)\n\nwhere\n\n  * **port** is the port to the server (defaults to 143 on non-secure and to 993 on secure connection)\n  * **host** is the hostname of the server\n  * **options** is an options object for auth etc.\n  * **options.secureConnection** is a Boolean value to indicate if the connection is initially secure or not\n  * **options.auth** is an authentication object\n  * **options.auth.user** is the IMAP username\n  * **options.auth.pass** is the IMAP password\n  * **options.auth.XOAuthToken** (optional) is either a String or *inbox.createXOAuthGenerator* object\n  * **options.clientId** is optional client ID params object\n  * **options.clientId.name** is is the name param etc. see [rfc 2971](http://tools.ietf.org/html/rfc2971#section-3.3) for possible field names\n\nExample:\n\n    var client = inbox.createConnection(false, "imap.gmail.com", {\n        secureConnection: true,\n        auth:{\n            user: "test.nodemailer@gmail.com",\n            pass: "Nodemailer123"\n        }\n    });\n\nOr when login with XOAUTH (see examples/xoauth.js)\n    \n    var client = inbox.createConnection(false, "imap.gmail.com", {\n        secureConnection: true,\n        auth:{\n            XOAuthToken: inbox.createXOAuthGenerator({\n                user: "test.nodemailer@gmail.com",\n                token: "1/Gr2OVA2Ol64fNyjZCns-bkRau5eLisbdlEa_HSuTaEk",\n                tokenSecret: "ymFpseHtEnrIsuL8Ppbfnnk3"\n            })\n        }\n    });\n        \nOnce the connection object has been created, use connect() to create the actual connection.\n\n    client.connect();\n    \nWhen the connection has been successfully established a \'connect\' event is emitted.\n\n    client.on("connect", function(){\n        console.log("Successfully connected to server");\n    });\n\n### List available mailboxes\n\nTo list the available mailboxes use \n\n    client.listMailboxes(callback)\n    \nWhere\n\n  * **callback** *(error, mailboxes)* returns a list of root mailbox object\n  \nMailbox objects have the following properties\n\n  * **name** - the display name of the mailbox\n  * **path** - the actual name of the mailbox, use it for opening the mailbox\n  * **type** - the type of the mailbox (if server hints about it)\n  * **hasChildren** - boolean indicator, if true, has child mailboxes\n  * **disabled** - boolean indicator, if true, can not be selected\n\nAdditionally mailboxes have the following methods\n\n  * **open** *([options, ]callback)* - open the mailbox (shorthand for *client.openMailbox*)\n  * **listChildren** *(callback)* - if the mailbox has children (*hasChildren* is true), lists the child mailboxes\n\nExample:\n\n    client.listMailboxes(function(error, mailboxes){\n        for(var i=0, len = mailboxes.length; i<len; i++){\n            if(mailboxes[i].hasChildren){\n                mailboxes[i].listChildren(function(error, children){\n                    console.log(children);\n                });\n            }\n        }\n    });\n\n### Fetch a specified mailbox object\n\nIf you need to access a specific mailbox object (for creating or listing child \nmailboxes etc.), you can do it with\n\n    client.getMailbox(path, callback)\n    \nWhere\n\n  * **path** is the mailbox directory path\n  * **callback** *(error, mailbox)* is the callback function\n\nExample:\n\n    client.getMailbox("INBOX.Arhiiv", function(error, mailbox){\n        if(mailbox && mailbox.hasChildren){\n            mailbox.listChildren(console.log);\n        }\n    });\n\n### Select a mailbox\n\nBefore you can check mailbox contents, you need to select one with\n\n    client.openMailbox(path[, options], callback)\n    \nWhere\n\n  * **path** is the path to the mailbox (ie. "INBOX" or "INBOX/Arhiiv") or a mailbox object\n  * **options** is an optional options object\n  * **options.readOnly** - if set to true, open the mailbox in read-only mode (downloading messages does not update seen/unseen flag)\n  * **callback** *(error, info)* is a callback function to run after the mailbox has been opened. Has an error param in case the opening failed and a info param with the properties of the opened mailbox.\n\nExample\n\n    client.on("connect", function(){\n        client.openMailbox("INBOX", function(error, info){\n            if(error) throw error;\n            console.log("Message count in INBOX: " + info.count);\n        });\n    });\n\n### Listing e-mails\n\nOnce a mailbox has been opened you can list contained e-mails with\n\n    client.listMessages(from[, limit], callback)\n\nWhere\n\n  * **from** is the index of the first message (0 based), you can use negative numbers to count from the end (-10 indicates the 10 last messages)\n  * **limit** defines the maximum count of messages to fetch, if not set or 0 all messages from the starting position will be included\n  * **callback** *(error, messages)* is the callback function to run with the message array\n  \nExample\n\n    // list newest 10 messages\n    client.listMessages(-10, function(err, messages){\n        messages.forEach(function(message){\n            console.log(message.UID + ": " + message.title);\n        });\n    });\n\nExample output for a message listing\n\n    [\n        { \n            // if uidvalidity changes, all uid values are void!\n            UIDValidity: \'664399135\',\n            \n            // uid value of the message\n            UID: 52,\n            \n            // message flags (Array)\n            flags: [ \'\\\\Flagged\', \'\\\\Seen\' ],\n            \n            // date of the message (Date object)\n            date: Wed, 25 Apr 2012 12:23:05 GMT,\n            \n            title: \'This is a message, may contain unicode symbols\',\n            \n            // single "from:" address\n            from: { \n                name: \'Andris Reinman\', \n                address: \'andris.reinman@gmail.com\' \n            },\n            \n            // an array of "to:" addresses\n            to: [\n                {\n                    name: \'test nodemailer\',\n                    address: \'test.nodemailer@gmail.com\'\n                }\n            ],\n            \n            // an array of "cc:" addresses\n            cc: [\n                {\n                    name: \'test nodemailer\',\n                    address: \'test.nodemailer@gmail.com\'\n                }\n            ],\n            \n            messageId: \'<04541AB5-9FBD-4255-81AA-18FE67CB97E5@gmail.com>\',\n            inReplyTo: \'<4FB16D5A.30808@gmail.com>\',\n            references: [\'<4FB16D5A.30808@gmail.com>\',\'<1299323903.19454@foo.bar>\']\n        },\n        ...\n    ]\n    \n**NB!** if some properties are not present in a message, it may be not included\nin the message object - for example, if there are no "cc:" addresses listed, \nthere is no "cc" field in the message object \n\n### Fetch message details\n\nTo fetch message data (flags, title, etc) for a specific message, use\n\n    client.fetchData(uid, callback)\n    \nWhere\n\n  * **uid** is the UID value for the mail\n  * **callback** *(error, message)* is the callback function to with the message data object (or null if the message was not found). Gets an error parameter if error occured\n\nExample\n\n    client.fetchData(123, function(error, message){\n        console.log(message.flags);\n    });\n\n### Fetch message contents\n\nMessage listing only retrieves the envelope part of the message. To get the full RFC822 message body\nyou need to fetch the message.\n\n    var messageStream = client.createMessageStream(uid)\n    \nWhere\n\n  * **uid** is the UID value for the mail\n\nExample (output message contents to console)\n\n    client.createMessageStream(123).pipe(process.stdout, {end: false});\n\n**NB!** If the opened mailbox is not in read-only mode, the message will be \nautomatically marked as read (\\Seen flag is set) when the message is fetched.\n\n### Message flags\n\nYou can add and remove message flags like `\\Seen` or `\\Answered` with `client.addFlags()` and `client.removeFlags()`\n\n**Add flags**\n\n    client.addFlags(uid, flags, callback)\n\nWhere\n\n  * **uid** is the message identifier\n  * **flags** is the array of flags to be added\n  * **callback** *(error, flags)* is the callback to run, gets message flags array as a parameter \n\n**Remove flags**\n\n    client.removeFlags(uid, flags, callback)\n\nWhere\n\n  * **uid** is the message identifier\n  * **flags** is the array of flags to be removed\n  * **callback** *(error, flags)* is the callback to run, gets message flags array as a parameter\n\nExample\n\n    // add \\Seen and \\Flagged flag to a message\n    client.addFlags(123, ["\\\\Seen", "\\\\Flagged"], function(err, flags){\n        console.log("Current flags for a message: ", flags);\n    });\n    \n    // remove \\Flagged flag from a message\n    client.removeFlags(123, ["\\\\Flagged"], function(err, flags){\n        console.log("Current flags for a message: ", flags);\n    });\n\n### Upload a message\n\nYou can upload a message to current mailbox with `client.storeMessage()`\n\n    client.storeMessage(message[, flags], callback)\n\nWhere\n\n  * **message** is the message to be uploaded either as a string or a Buffer.\n  * **flags** is an array of flags to set to the message (ie. `["\\\\Seen"]`)\n  * **callback** is the callback function, gets message UID and UID and UIDValitity as a param\n\nExample\n\n    client.storeMessage("From: ....", ["\\\\Seen"], function(err, params){\n        console.log(err || params.UIDValidity +", "+ params.UID);\n    });\n\nWhen adding a message to the mailbox, also new message event is raised, after \nthe mail has been stored.\n\n### Wait for new messages\n\nYou can listen for new incoming e-mails with event "new"\n\n    client.on("new", function(message){\n        console.log("New incoming message " + message.title);\n    });\n    \n## Complete example\n\nListing newest 10 messages:\n\n    var inbox = require("inbox");\n    \n    var client = inbox.createConnection(false, "imap.gmail.com", {\n        secureConnection: true,\n        auth:{\n            user: "test.nodemailer@gmail.com",\n            pass: "Nodemailer123"\n        }\n    });\n    \n    client.connect();\n    \n    client.on("connect", function(){\n        client.openMailbox("INBOX", function(error, info){\n            if(error) throw error;\n            \n            client.listMessages(-10, function(err, messages){\n                messages.forEach(function(message){\n                    console.log(message.UID + ": " + message.title);\n                });\n            });\n\n        });\n    });',
69 silly publish   _id: 'inbox@0.1.12',
69 silly publish   description: 'This is a work in progress IMAP client for node.js.',
69 silly publish   dist: { shasum: '48654d86a706c6c2d413b1b15a52c82766ce06d6' } }
70 verbose url raw inbox
71 verbose url resolving [ 'https://registry.npmjs.org/', './inbox' ]
72 verbose url resolved https://registry.npmjs.org/inbox
73 info retry registry request attempt 1 at 17:00:58
74 http PUT https://registry.npmjs.org/inbox
75 http 409 https://registry.npmjs.org/inbox
76 verbose url raw inbox
77 verbose url resolving [ 'https://registry.npmjs.org/', './inbox' ]
78 verbose url resolved https://registry.npmjs.org/inbox
79 info retry registry request attempt 1 at 17:01:00
80 http GET https://registry.npmjs.org/inbox
81 http 200 https://registry.npmjs.org/inbox
82 error publish fail Cannot publish over existing version.
82 error publish fail Bump the 'version' field, set the --force flag, or
82 error publish fail     npm unpublish 'inbox@0.1.12'
82 error publish fail and try again
83 error System Darwin 11.4.0
84 error command "node" "/usr/local/bin/npm" "publish"
85 error cwd /Users/andris/Projects/inbox
86 error node -v v0.8.1
87 error npm -v 1.1.33
88 error code EPUBLISHCONFLICT
89 error message publish fail
90 verbose exit [ 1, true ]
